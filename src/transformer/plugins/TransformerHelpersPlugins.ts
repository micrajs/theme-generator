import {
  flattenAST,
  flattenASTWithLists,
  findElement,
  findElementByPath,
  getPrimitiveElements,
  getElementValues,
  isElement,
  isStringValue,
  isNumericValue,
  isBooleanValue,
  isNullishValue,
  isPrimitiveValue,
  isNodeValue,
  isListValue,
  isParentValue,
  isFactoryValue,
  isNodeElement,
  isStringElement,
  isNumericElement,
  isListElement,
  isBooleanElement,
  isNullishElement,
  isFactoryElement,
  isPrimitiveElement,
  isParentElement,
  ParserValue,
} from '../../parser';
import type { Plugin } from '../../plugins/types';

import {
  set,
  clamp,
  inRange,
  random,
  deburr,
  escape,
  pad,
  padEnd,
  padStart,
  unescape,
  toPlural,
  toSingular,
  capitalize,
  toUpperCase,
  toLowerCase,
  toKebabCase,
  toCamelCase,
  toSnakeCase,
  toPascalCase,
  toMacroCase,
  toSentenceCase,
} from '../utilities';

export const TransformerHelpersPlugins: Plugin = {
  transformer: {
    context: () => ({
      flattenAST,
      flattenASTWithLists,
      findElement,
      findElementByPath,
      getPrimitiveElements,
      getElementValues,
      isElement,
      isStringValue,
      isNumericValue,
      isBooleanValue,
      isNullishValue,
      isPrimitiveValue,
      isNodeValue,
      isListValue,
      isParentValue,
      isFactoryValue,
      isNodeElement,
      isStringElement,
      isNumericElement,
      isListElement,
      isBooleanElement,
      isNullishElement,
      isFactoryElement,
      isPrimitiveElement,
      isParentElement,
      set,
      clamp,
      inRange,
      random,
      deburr,
      escape,
      pad,
      padEnd,
      padStart,
      unescape,
      toPlural,
      toSingular,
      capitalize,
      toUpperCase,
      toLowerCase,
      toKebabCase,
      toCamelCase,
      toSnakeCase,
      toPascalCase,
      toMacroCase,
      toSentenceCase,
    }),
  },
};
